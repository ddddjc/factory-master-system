<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.djc.mapper.MaintenanceEmployeeMapper">

    <resultMap type="com.djc.entity.MaintenanceEmployee" id="MaintenanceEmployeeMap">
        <result property="maintenanceEmployeeId" column="maintenance_employee_id" jdbcType="INTEGER"/>
        <result property="maintenanceArrangeId" column="maintenance_arrange_id" jdbcType="INTEGER"/>
        <result property="employeeId" column="employee_id" jdbcType="INTEGER"/>
        <result property="importance" column="importance" jdbcType="VARCHAR"/>
        <result property="remark" column="remark" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap type="com.djc.entity.Vo.MaintenanceEmployeeVo" id="MaintenanceEmployeeVoMap">
        <result property="maintenanceEmployeeId" column="maintenance_employee_id" jdbcType="INTEGER"/>
        <result property="maintenanceArrangeId" column="maintenance_arrange_id" jdbcType="INTEGER"/>
        <result property="employeeId" column="employee_id" jdbcType="INTEGER"/>
        <result property="importance" column="importance" jdbcType="VARCHAR"/>
        <result property="remark" column="remark" jdbcType="VARCHAR"/>
        <result property="employeeId" column="employee_id" jdbcType="INTEGER"/>
        <result property="employeeName" column="employee_name" jdbcType="VARCHAR"/>
        <result property="employeeSex" column="employee_sex" jdbcType="VARCHAR"/>
        <result property="age" column="age" jdbcType="INTEGER"/>
        <result property="role" column="role" jdbcType="VARCHAR"/>
        <result property="teamId" column="team_id" jdbcType="INTEGER"/>
        <result property="phoneNumber" column="phone_number" jdbcType="VARCHAR"/>
        <result property="workPlace" column="work_place" jdbcType="VARCHAR"/>
        <result property="department" column="department" jdbcType="VARCHAR"/>
        <result property="employeeEmail" column="employee_email" jdbcType="VARCHAR"/>
        <result property="employeeStatus" column="employee_status" jdbcType="VARCHAR"/>
        <result property="hireDate" column="hire_date" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="MaintenanceEmployeeMap">
        select maintenance_employee_id,
               maintenance_arrange_id,
               employee_id,
               importance,
               remark
        from maintenance_employee
        where maintenance_employee_id = #{maintenanceEmployeeId}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="MaintenanceEmployeeMap">
        select
        maintenance_employee_id, maintenance_arrange_id, employee_id, importance, remark
        from maintenance_employee
        <where>
            <if test="maintenanceEmployeeId != null">
                and maintenance_employee_id = #{maintenanceEmployeeId}
            </if>
            <if test="maintenanceArrangeId != null">
                and maintenance_arrange_id = #{maintenanceArrangeId}
            </if>
            <if test="employeeId != null">
                and employee_id = #{employeeId}
            </if>
            <if test="importance != null and importance != ''">
                and importance = #{importance}
            </if>
            <if test="remark != null and remark != ''">
                and remark = #{remark}
            </if>
        </where>
        limit #{pageable.offset}, #{pageable.pageSize}
    </select>

    <!--关键字模糊查询-->
    <!--<select id="queryAll" resultMap="MaintenanceEmployeeMap">
        SELECT * FROM maintenance_employee
        where xxx LIKE CONCAT('%', #{keyword}, '%')
        LIMIT #{page},#{num}
    </select>-->


    <!--统计总行数-->
    <select id="count" resultType="java.lang.Long">
        select count(1)
        from maintenance_employee
        <where>
            <if test="maintenanceEmployeeId != null">
                and maintenance_employee_id = #{maintenanceEmployeeId}
            </if>
            <if test="maintenanceArrangeId != null">
                and maintenance_arrange_id = #{maintenanceArrangeId}
            </if>
            <if test="employeeId != null">
                and employee_id = #{employeeId}
            </if>
            <if test="importance != null and importance != ''">
                and importance = #{importance}
            </if>
            <if test="remark != null and remark != ''">
                and remark = #{remark}
            </if>
        </where>
    </select>
    <select id="queryMaintenanceEmployeeVo" resultType="com.djc.entity.Vo.MaintenanceEmployeeVo">
        select maintenance_employee.maintenance_employee_id, maintenance_employee.maintenance_arrange_id, maintenance_employee.employee_id, maintenance_employee.importance, maintenance_employee.remark,
               employee.employee_id, employee_name, employee_sex, age, role, team_id, phone_number, work_place, department, employee_email, employee_status,  hire_date
            from maintenance_employee,employee
        where employee.employee_id=maintenance_employee.employee_id
        and maintenance_arrange_id=#{maintenanceArrangeId}
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="maintenanceEmployeeId" useGeneratedKeys="true">
        insert into maintenance_employee(maintenance_arrange_id, employee_id, importance, remark)
        values (#{maintenanceArrangeId}, #{employeeId}, #{importance}, #{remark})
    </insert>

    <insert id="insertBatch" keyProperty="maintenanceEmployeeId" useGeneratedKeys="true">
        insert into maintenance_employee(maintenance_arrange_id, employee_id, importance, remark)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.maintenanceArrangeId}, #{entity.employeeId}, #{entity.importance}, #{entity.remark})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="maintenanceEmployeeId" useGeneratedKeys="true">
        insert into maintenance_employee(maintenance_arrange_id, employee_id, importance, remark)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.maintenanceArrangeId}, #{entity.employeeId}, #{entity.importance}, #{entity.remark})
        </foreach>
        on duplicate key update
        maintenance_arrange_id = values(maintenance_arrange_id),
        employee_id = values(employee_id),
        importance = values(importance),
        remark = values(remark)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update maintenance_employee
        <set>
            <if test="maintenanceArrangeId != null">
                maintenance_arrange_id = #{maintenanceArrangeId},
            </if>
            <if test="employeeId != null">
                employee_id = #{employeeId},
            </if>
            <if test="importance != null and importance != ''">
                importance = #{importance},
            </if>
            <if test="remark != null and remark != ''">
                remark = #{remark},
            </if>
        </set>
        where maintenance_employee_id = #{maintenanceEmployeeId}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete
        from maintenance_employee
        where maintenance_employee_id = #{maintenanceEmployeeId}
    </delete>

</mapper>

